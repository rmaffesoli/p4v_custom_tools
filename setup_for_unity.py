#!/usr/bin/env python
from __future__ import print_function

import os

import argparse
import socket
import subprocess

default_unity_p4ignore = [
    "# This .gitignore file should be placed at the root of your Unity project directory",
    "#",
    "# Get latest from https://github.com/github/gitignore/blob/main/Unity.gitignore",
    "#",
    "/Library/",
    "/Temp/",
    "/Obj/",
    "/Build/",
    "/Builds/",
    "/Logs/",
    "/UserSettings/",
    "\n# MemoryCaptures can get excessive in size.",
    "\n# They also could contain extremely sensitive data",
    "/MemoryCaptures/",
    "\n# Recordings can get excessive in size",
    "/Recordings/",
    "\n# Uncomment this line if you wish to ignore the asset store tools plugin",
    "# /Assets/AssetStoreTools*",
    "\n# Autogenerated Jetbrains Rider plugin",
    "/Assets/Plugins/Editor/JetBrains*",
    "\n# Visual Studio cache directory",
    ".vs/",
    "\n# Gradle cache directory",
    ".gradle/",
    "\n# Autogenerated VS/MD/Consulo solution and project files",
    "ExportedObj/",
    ".consulo/",
    "**.csproj",
    "**.unityproj",
    "**.sln",
    "**.suo",
    "**.tmp",
    "**.user",
    "**.userprefs",
    "**.pidb",
    "**.booproj",
    "**.svd",
    "**.pdb",
    "*8.mdb",
    "**.opendb",
    "**.VC.db",
    "\n# Unity3D generated meta files",
    "**.pidb.meta",
    "**.pdb.meta",
    "**.mdb.meta",
    "\n# Unity3D generated file on crash reports",
    "sysinfo.txt",
    "\n# Builds",
    "**.apk",
    "**.aab",
    "**.unitypackage",
    "**.app",
    "\n# Crashlytics generated file",
    "crashlytics-build.properties",
    "\n# Packed Addressables",
    "/Assets/AddressableAssetsData/**.bin*",
    "\n# Temporary auto-generated Android Assets",
    "/Assets/StreamingAssets/aa.meta",
    "/Assets/StreamingAssets/aa/**",
]

default_unity_typemap = [
    "# Perforce File Type Mapping Specifications.",
    "#",
    "#  TypeMap:     a list of filetype mappings; one per line.",
    "#               Each line has two elements:",
    "#",
    "#               Filetype: The filetype to use on 'p4 add'.",
    "#",
    "#               Path:     File pattern which will use this filetype.",
    "#",
    "# See 'p4 help typemap' for more information.",
    "",
    "TypeMap:",
    "    text //depot/....js",
    "   text //depot/....cs",
    "   text //depot/...shader",
    "   text //depot/....meta",
    "   text+l //depot/....cm",
    "   text+l //depot/....proc",
    "   text+l //depot/....md5mesh",
    "   text+l //depot/....md5anim",
    "   text+l //depot/....ma",
    "   binary //depot/....dll",
    "   binary //depot/....exe",
    "   binary //depot/....response",
    "   binary //depot/....lib",
    "   binary //depot/....pdb",
    "   binary //depot/....u",
    "   binary //depot/....ini",
    "   binary //depot/....stub",
    "   binary //depot/....ip",
    "   binary+l //depot/....prefab",
    "   binary+l //depot/....mb",
    "   binary+l //depot/....mat",
    "   binary+l //depot/....psb",
    "   binary+l //depot/....mp3",
    "   binary+l //depot/....fbx",
    "   binary+l //depot/....unity",
    "   binary+l //depot/....asset",
    "   binary+l //depot/....aas",
    "   binary+l //depot/....tga",
    "   binary+l //depot/....jpg",
    "   binary+l //depot/....lwo",
    "   binary+l //depot/....wav",
    "   binary+l //depot/....ogg",
    "   binary+l //depot/....demo",
    "   binary+l //depot/....roq",
    "   binary+l //depot/....doc",
    "   binary+l //depot/....xls",
    "   binary+l //depot/....celtx",
    "   binary+l //depot/....pdf",
    "   binary+l //depot/....odt",
    "   binary+l //depot/....ods",
    "   binary+l //depot/....ppt",
    "   binary+l //depot/....skp",
    "   binary+lS //depot/....dds",
    "   binary+lS //depot/....bnk",
    "   binary+lS //depot/....light",
    "   binary+lS //depot/....shadow",
    "   binary+lS //depot/....ibl",
    "   binary+lS //depot/....bik",
    "   binary+lS //depot/....upk",
]


def export_p4_config(ws_root, port, ws, user):
    config_filename = ".p4config"
    ignore_filename = ".p4ignore"
    config_filepath = os.path.join(ws_root, config_filename)
    lines = [
        "P4PORT={}\n".format(port),
        "P4CLIENT={}\n".format(ws),
        "P4USER={}\n".format(user),
        "P4HOST={}\n".format(socket.gethostname()),
        "P4IGNORE={}\n".format(ignore_filename),
    ]

    if os.path.exists(config_filepath):
        print(".p4config already exists")
        return

    with open(config_filepath, "w") as config_buffer:
        config_buffer.writelines(lines)
    print("p4config written to", config_filepath)


def export_p4_ignore(ws_root):
    ignore_filename = ".p4ignore"
    ignore_filepath = os.path.join(ws_root, ignore_filename)
    lines = default_unity_p4ignore

    if os.path.exists(ignore_filepath):
        print(".p4ignore already exists")
        return

    with open(ignore_filepath, "w") as ignore_buffer:
        ignore_buffer.writelines(lines)

    print("p4ignore written to", ignore_filepath)


def get_stream_name(ws_root):
    p = subprocess.Popen(
        ["p4", "-F", '"%Stream%"', "-ztag", "client", "-o"],
        stdout=subprocess.PIPE,
        stdin=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        cwd=ws_root,
    )

    stream_stdout = p.communicate()[0]
    stream = stream_stdout.decode().replace("\r\n", "").replace('"', "")

    return stream


def setup_p4_typemap(ws_root):
    stream_name = get_stream_name(ws_root)
    depot_name = [_ for _ in stream_name.split("/") if _][0]
    typemap_string = "\n".join(
        [_.replace("depot", depot_name) for _ in default_unity_typemap]
    )

    p = subprocess.Popen(
        ["p4", "typemap", "-i"],
        stdout=subprocess.PIPE,
        stdin=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        cwd=ws_root,
    )
    typemap_stdout = p.communicate(input=typemap_string.encode("utf-8"))[0]
    print(typemap_stdout)


def setup_for_unreal(ws_root, port, ws, user):
    export_p4_config(ws_root, port, ws, user)
    export_p4_ignore(ws_root)
    #setup_p4_typemap(ws_root)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("ws_root")
    parser.add_argument("port")
    parser.add_argument("ws")
    parser.add_argument("user")

    parsed_args = parser.parse_args()

    setup_for_unreal(
        parsed_args.ws_root,
        parsed_args.port,
        parsed_args.ws,
        parsed_args.user,
    )
